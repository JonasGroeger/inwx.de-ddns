#!/bin/bash

# Configuration ################################################################
USERNAME=""      # Your username at INWX
PASSWORD=""      # Your password at INWX
V4_RECORD_ID=""  # The ID of the A record
V6_RECORD_ID=""  # The ID of the AAAA record
SILENT=false     # Should the script write a logfile? (true | false)
################################################################################

API_ENDPOINT="https://api.domrobot.com/xmlrpc/"

V4_POOL=(
    "https://ip4.nnev.de/"
    "http://v4.ident.me/"
    "https://ipv4.icanhazip.com"
    "https://v4.ifconfig.co/"
    "https://ipv4.wtfismyip.com/text"
)
V6_POOL=(
    "https://ip6.nnev.de/"
    "http://v6.ident.me/"
    "https://ipv6.icanhazip.com"
    "https://v6.ifconfig.co/"
    "https://ipv6.wtfismyip.com/text"
)
UPDATE_RECORD=$(cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<methodCall>
   <methodName>nameserver.updateRecord</methodName>
   <params>
      <param>
         <value>
            <struct>
               <member>
                  <name>user</name>
                  <value>
                     <string>%USER%</string>
                  </value>
               </member>
               <member>
                  <name>lang</name>
                  <value>
                     <string>en</string>
                  </value>
               </member>
               <member>
                  <name>pass</name>
                  <value>
                     <string>%PASSWD%</string>
                  </value>
               </member>
               <member>
                  <name>id</name>
                  <value>
                     <int>%DNSID%</int>
                  </value>
               </member>
               <member>
                  <name>content</name>
                  <value>
                     <string>%NEWIP%</string>
                  </value>
               </member>
               <member>
                  <name>ttl</name>
                  <value>
                     <int>360</int>
                  </value>
               </member>
            </struct>
         </value>
      </param>
   </params>
</methodCall>
EOF
)

function v4() {
    for V4_API in "${V4_POOL[@]}"; do
        MAYBE_V4_ADDR=$(curl -s "$V4_API")
        if [[ $MAYBE_V4_ADDR =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "$MAYBE_V4_ADDR"
            return 0
        fi

        continue
    done

    return 1
}

function v6() {
    for V6_API in "${V6_POOL[@]}"; do
        MAYBE_V6_ADDR=$(curl -s "$V6_API")
        if [[ $MAYBE_V6_ADDR == *":"* ]]; then
            echo "$MAYBE_V6_ADDR"
            return 0
        fi
        continue
    done
    return 1
}

function log() {
    $SILENT || echo "$(date --utc) | $1" | tee -a update.log
}

function update_ip() {
    DATA=$(echo "$UPDATE_RECORD" | sed -e "s/%USER%/$1/g;s/%PASSWD%/$2/g;s/%DNSID%/$3/g;s/%NEWIP%/$4/g")
    curl -s -X POST -d "$DATA" "$API_ENDPOINT" --header "Content-Type:text/xml"
}

touch old.ipv4 old.ipv6
OLD_V4=$(cat old.ipv4)
OLD_V6=$(cat old.ipv6)

# Write "(empty)" if the files are empty for nice output on first run.
if [ -z "$OLD_V4" ]; then OLD_V4="(empty)"; fi
if [ -z "$OLD_V6" ]; then OLD_V6="(empty)"; fi

NEW_V4=$(v4)
if [[ $? == 1 ]]; then
    log "Could not get a valid IPv4 address from the pool. Is the connection up?"
    exit 1
fi

NEW_V6=$(v6)
if [[ $? == 1 ]]; then
    log "Could not get a valid IPv6 address from the pool. Is the connection up?"
    exit 1
fi

# Update the A record
if [ ! "$OLD_V4" == "$NEW_V4" ]; then
    UPDATE_IP_OUTPUT=$(update_ip "$USERNAME" "$PASSWORD" "$V4_RECORD_ID" "$NEW_V4")

    if ! grep -q "Command completed successfully" <<< "$UPDATE_IP_OUTPUT"; then
        log "Something went wrong updating the IPv4 address. Check the configuration and make sure you're not using Two-Factor-Authentication."
        exit 1
    fi

    echo "$NEW_V4" > old.ipv4
    log "Updated IPv4: $OLD_V4 --> $NEW_V4"
else
    echo "IPv4: No changes"
fi

# Update the AAAA record
if [ ! "$OLD_V6" == "$NEW_V6" ]; then
    UPDATE_IP_OUTPUT=$(update_ip "$USERNAME" "$PASSWORD" "$V6_RECORD_ID" "$NEW_V6")

    if ! grep -q "Command completed successfully" <<< "$UPDATE_IP_OUTPUT"; then
        log "Something went wrong updating the IPv6 address. Check the configuration and make sure you're not using Two-Factor-Authentication."
        exit 1
    fi

    echo "$NEW_V6" > old.ipv6
    log "Updated IPv6: $OLD_V6 --> $NEW_V6"
else
    echo "IPv6: No changes"
fi
